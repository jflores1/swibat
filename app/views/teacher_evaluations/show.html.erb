<%= provide(:title, "#{@evaluation.eval_type.capitalize} for #{@user.full_name}") %>

<% content_for :head do %>
  <style>
   	#graph path {
			stroke: steelblue;
			stroke-width: 2;
			fill: none;
		}
		.axis { shape-rendering: crispEdges; }
		.x.axis line { stroke: lightgrey; }
		.x.axis .minor { stroke-opacity: .5; }
		.x.axis path { display: none; }
		.y.axis line, .y.axis path {
			fill: none;
			stroke: #000;
		}

    .bar {
      fill: #008080;
      cursor: pointer;
    }

    .bar:hover{
      opacity: 0.7;
    }

    .x.axis path {
      display: none;
    }

    div.tooltip {   
      position: absolute;           
      text-align: center;           
      padding: 5px;             
      font: 12px sans-serif;                
      border: 3px solid #555;      
      background: #fff;
      border-radius: 8px;           
      pointer-events: none;         
    }

  </style>
<% end %>


<% content_for :left_column do %>
	<h1><%= @evaluation.eval_type.capitalize %> for <%= link_to @user.full_name, user_path(@user) %></h1>
	<p>Published on <%= normal_date_format(@evaluation.created_at) %></p>
  
	<div id="graph"></div>

  <% if @evaluation.eval_type == "observation" %>
    <% if @evaluation.video %>            
        <div class="summary-graph video">
          <iframe width="100%" height="400px" src="http://www.youtube.com/embed/<%= @evaluation.video.yt_video_id %>" frameborder="0" allowfullscreen></iframe>
        </div>
    <% end %> 
  <% end %>

	<h3>Total Score: <%= number_with_precision(@evaluation.calculate_score, :precision => 2) %></h3>

	<h3>Score by domain</h3>

	<table class="table table-striped table-bordered">
		<thead>
			<tr>
				<th width="50%"></th>
				<th class="eval">Unsatisfactory</th>
				<th class="eval">Basic</th>
				<th class="eval">Proficient</th>
				<th class="eval">Distinguished</th>
			</tr>
		</thead>
		<tbody>			
			<% @evaluation.evaluation_template.evaluation_domains.each do |domain| %>
				<tr class="domain-row">
					<td class="domain" colspan="5"><%= domain.name %> (Score: <%= number_with_precision(domain.calculate_score(@evaluation), :precision => 2)%>)</td>
				</tr>

				<% domain.evaluation_criteria.each do |criterion| %>
					<tr class="subdomain-row">
						<td class="subdomain"><%= criterion.contents %></td>
						<% rating = EvaluationRating.find_by_criterion_id_and_evaluation_id(criterion.id, @evaluation.id) %>
						<% (1..4).each do |i| %>
							<td class="eval">
								<%= '<i class="icon icon-ok"></i>'.html_safe if rating && rating.score == i %>
							</td>
						<% end %>
					</tr>
				<% end %>
			<% end %>
		</tbody>
	</table>

	<div>
	  <header>
	    <h2>Comments</h2>
	  </header>
	  <section class="course-info">
	    <%= render :partial => 'comments/comments', :locals => {:commentable => @evaluation} %>
	  </section>
	</div>
 	<script>
    // global variables
    var properties = {
      w: 650,
      h: 300,
      margin: {top: 20, right: 50, bottom: 100, left: 50},
      formatPercent: d3.format("d"),
      formatDecimal: d3.format(".2f")
    }
    
    var allData = <%= raw @json_data %>;
    
    function displayDomainBarChart(properties, data, allData, type){
      var width = properties.w - properties.margin.left - properties.margin.right,
          height = properties.h - properties.margin.top - properties.margin.bottom;
      data.forEach(function(d) {
        d.score = +d.score;
      });

      // define the x scale
      var x = d3.scale.ordinal()
        .rangeRoundBands([0, width], .1)
        .domain(data.map(function(d) { return d.name; }));    

      // define the y scale
      var y = d3.scale.linear()
          .domain([0, 4])
          .range([height, 0]);

      // define the x axis
      var xAxis = d3.svg.axis()
          .scale(x)
          .orient("bottom");

      // define the y axis
      var yAxis = d3.svg.axis()
          .scale(y)
          .orient("left")
          .tickFormat(properties.formatPercent);

      // remove previous graphs, if there are any
      $('#graph').empty();

      // create the graph
      var svg = d3.select("#graph").append("svg")
          .attr("width", width + properties.margin.left + properties.margin.right)
          .attr("height", height + properties.margin.top + properties.margin.bottom)
        .append("g")
          .attr("transform", "translate(" + properties.margin.left + "," + properties.margin.top + ")");

      // create the tooltip div
      var tooltip = d3.select("body").append("div")   
        .attr("class", "tooltip")               
        .style("opacity", 0);

      // append the x axis to the graph
      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + (height + 10) + ")")
          .call(xAxis)
            .selectAll("text")
            .attr("transform", function(d) {
                return "rotate(-10)" 
            });         

      // append the y axis to the graph
      svg.append("g")
          .attr("class", "y axis")
          .call(yAxis)
        .append("text")
          .attr("transform", "rotate(-90)")          
          .attr("y", 6)
          .attr("dy", ".71em")
          .style("text-anchor", "end")
          .text("Score");

      // add the data
      svg.selectAll(".bar")
          .data(data)
        .enter().append("rect")
          .attr("class", "bar")
          .attr("x", function(d) { return x(d.name); })
          .attr("width", x.rangeBand())
          .attr("y", function(d) { return y(d.score); })
          .attr("height", function(d) { return height - y(d.score); })
          .on("click", onDomainClick)
          .on("mouseover", showTooltip)
          .on("mouseout", function(d) {       
            tooltip.transition()        
                .duration(500)      
                .style("opacity", 0);   
          });;

      function showTooltip(d){
        tooltip.transition()        
            .duration(200)      
            .style("opacity", .9);      
        tooltip .html('Domain: ' + d.name + "<br/> Score: "  + d.score)  
            .style("left", (d3.event.pageX) + "px")     
            .style("top", (d3.event.pageY - 28) + "px");    
                       
      }

      function onDomainClick(d){
        if (type == 'domain'){
          displayDomainBarChart(properties, d.criteria, allData, 'subdomain');
        } else {
          displayDomainBarChart(properties, allData, allData, 'domain');
        }
      }
    }

    displayDomainBarChart(properties, allData, allData, 'domain');    

    function type(d) {
      d.score = +d.score;
      return d;
    }
  </script>
<% end %>

<% content_for :right_column do %>
	<%= render partial: 'sidebar' %>
<% end %>
